})
# hover2 <- hover()['pointNumber'] %in% df1()$point
# renderPlotly() also understands ggplot2 objects!
output$plot <- renderPlotly({
print(data$df1)
data$hover <- event_data("plotly_click")
plot_ly(data$df, x = ~x, y = ~y)
})
# output$plot1 <- renderPlotly({
#
#   plot_ly(data$df1, x = ~x, y = ~y)
# })
#
output$event <- renderPrint({
if (is.null(data$hover)) "Hover on a point!" else data$hover
})
}
shinyApp(ui, server)
library(shiny)
library(plotly)
ui <- fluidPage(
plotlyOutput("plot"),
verbatimTextOutput("event"),
plotlyOutput("plot1")
)
server <- function(input, output) {
data <- reactiveValues()
data$df <- data.frame(x = c(1,2,3), y = c(1,2,3))
data$df1 <- data.frame(x=numeric(),y=numeric(), point=numeric())
newEntry <- observe({
if(!(data$hover$pointNumber %in% data$df1$point)) {
print('asd')
newLine <- isolate(c(data$hover$x, data$hover$y))
isolate(data$df1 <- rbind(data$df1, newLine))
}
})
# hover2 <- hover()['pointNumber'] %in% df1()$point
# renderPlotly() also understands ggplot2 objects!
output$plot <- renderPlotly({
print(data$df1)
data$hover <- event_data("plotly_click")
plot_ly(data$df, x = ~x, y = ~y)
})
# output$plot1 <- renderPlotly({
#
#   plot_ly(data$df1, x = ~x, y = ~y)
# })
#
output$event <- renderPrint({
if (is.null(data$hover)) "Hover on a point!" else data$hover
})
}
shinyApp(ui, server)
library(shiny)
library(plotly)
ui <- fluidPage(
plotlyOutput("plot"),
verbatimTextOutput("event"),
plotlyOutput("plot1")
)
server <- function(input, output) {
data <- reactiveValues()
data$df <- data.frame(x = c(1,2,3), y = c(1,2,3))
data$df1 <- data.frame(x=numeric(),y=numeric(), point=numeric())
# newEntry <- observe({
#   if(!(data$hover$pointNumber %in% data$df1$point)) {
#     print('asd')
#     newLine <- isolate(c(data$hover$x, data$hover$y))
#     isolate(data$df1 <- rbind(data$df1, newLine))
#   }
# })
# hover2 <- hover()['pointNumber'] %in% df1()$point
# renderPlotly() also understands ggplot2 objects!
output$plot <- renderPlotly({
print(data$df1)
data$hover <- event_data("plotly_click")
plot_ly(data$df, x = ~x, y = ~y)
})
# output$plot1 <- renderPlotly({
#
#   plot_ly(data$df1, x = ~x, y = ~y)
# })
#
output$event <- renderPrint({
if (is.null(data$hover)) "Hover on a point!" else data$hover
})
}
shinyApp(ui, server)
library(shiny)
library(plotly)
ui <- fluidPage(
plotlyOutput("plot"),
verbatimTextOutput("event"),
plotlyOutput("plot1")
)
server <- function(input, output) {
data <- reactiveValues()
data$df <- data.frame(x = c(1,2,3), y = c(1,2,3))
data$df1 <- data.frame(x=numeric(),y=numeric(), point=numeric())
newEntry <- observe({
req(data$hover$pointNumber)
if(!(data$hover$pointNumber %in% data$df1$point)) {
print('asd')
newLine <- isolate(c(data$hover$x, data$hover$y))
isolate(data$df1 <- rbind(data$df1, newLine))
}
})
# hover2 <- hover()['pointNumber'] %in% df1()$point
# renderPlotly() also understands ggplot2 objects!
output$plot <- renderPlotly({
print(data$df1)
data$hover <- event_data("plotly_click")
plot_ly(data$df, x = ~x, y = ~y)
})
# output$plot1 <- renderPlotly({
#
#   plot_ly(data$df1, x = ~x, y = ~y)
# })
#
output$event <- renderPrint({
if (is.null(data$hover)) "Hover on a point!" else data$hover
})
}
shinyApp(ui, server)
library(shiny)
library(plotly)
ui <- fluidPage(
plotlyOutput("plot"),
verbatimTextOutput("event"),
plotlyOutput("plot1")
)
server <- function(input, output) {
data <- reactiveValues()
data$df <- data.frame(x = c(1,2,3), y = c(1,2,3))
data$df1 <- data.frame(x=numeric(),y=numeric(), point=numeric())
newEntry <- observeEvent({
req(data$hover$pointNumber)
if(!(data$hover$pointNumber %in% data$df1$point)) {
print('asd')
newLine <- isolate(c(data$hover$x, data$hover$y))
isolate(data$df1 <- rbind(data$df1, newLine))
}
})
# hover2 <- hover()['pointNumber'] %in% df1()$point
# renderPlotly() also understands ggplot2 objects!
output$plot <- renderPlotly({
print(data$df1)
data$hover <- event_data("plotly_click")
plot_ly(data$df, x = ~x, y = ~y)
})
# output$plot1 <- renderPlotly({
#
#   plot_ly(data$df1, x = ~x, y = ~y)
# })
#
output$event <- renderPrint({
if (is.null(data$hover)) "Hover on a point!" else data$hover
})
}
shinyApp(ui, server)
library(shiny)
library(plotly)
ui <- fluidPage(
plotlyOutput("plot"),
verbatimTextOutput("event"),
plotlyOutput("plot1")
)
server <- function(input, output) {
data <- reactiveValues()
data$df <- data.frame(x = c(1,2,3), y = c(1,2,3))
data$df1 <- data.frame(x=numeric(),y=numeric(), point=numeric())
newEntry <- observeEvent({data$hover,
req(data$hover$pointNumber)
if(!(data$hover$pointNumber %in% data$df1$point)) {
print('asd')
newLine <- isolate(c(data$hover$x, data$hover$y))
isolate(data$df1 <- rbind(data$df1, newLine))
}
})
# hover2 <- hover()['pointNumber'] %in% df1()$point
# renderPlotly() also understands ggplot2 objects!
output$plot <- renderPlotly({
print(data$df1)
data$hover <- event_data("plotly_click")
plot_ly(data$df, x = ~x, y = ~y)
})
# output$plot1 <- renderPlotly({
#
#   plot_ly(data$df1, x = ~x, y = ~y)
# })
#
output$event <- renderPrint({
if (is.null(data$hover)) "Hover on a point!" else data$hover
})
}
shinyApp(ui, server)
library(shiny)
library(plotly)
ui <- fluidPage(
plotlyOutput("plot"),
verbatimTextOutput("event"),
plotlyOutput("plot1")
)
server <- function(input, output) {
data <- reactiveValues()
data$df <- data.frame(x = c(1,2,3), y = c(1,2,3))
data$df1 <- data.frame(x=numeric(),y=numeric(), point=numeric())
newEntry <- observeEvent(data$hover,{
req(data$hover$pointNumber)
if(!(data$hover$pointNumber %in% data$df1$point)) {
print('asd')
newLine <- isolate(c(data$hover$x, data$hover$y))
isolate(data$df1 <- rbind(data$df1, newLine))
}
})
# hover2 <- hover()['pointNumber'] %in% df1()$point
# renderPlotly() also understands ggplot2 objects!
output$plot <- renderPlotly({
print(data$df1)
data$hover <- event_data("plotly_click")
plot_ly(data$df, x = ~x, y = ~y)
})
# output$plot1 <- renderPlotly({
#
#   plot_ly(data$df1, x = ~x, y = ~y)
# })
#
output$event <- renderPrint({
if (is.null(data$hover)) "Hover on a point!" else data$hover
})
}
shinyApp(ui, server)
library(shiny)
library(plotly)
ui <- fluidPage(
plotlyOutput("plot"),
verbatimTextOutput("event"),
plotlyOutput("plot1")
)
server <- function(input, output) {
data <- reactiveValues()
data$df <- data.frame(x = c(4,5,6), y = c(1,2,3))
data$df1 <- data.frame(x=numeric(),y=numeric(), point=numeric())
newEntry <- observeEvent(data$hover,{
req(data$hover$pointNumber)
if(!(data$hover$pointNumber %in% data$df1$point)) {
newLine <- isolate(c(data$hover$x, data$hover$y))
isolate(data$df1 <- rbind(data$df1, newLine))
}
})
# hover2 <- hover()['pointNumber'] %in% df1()$point
# renderPlotly() also understands ggplot2 objects!
output$plot <- renderPlotly({
print(data$df1)
data$hover <- event_data("plotly_click")
plot_ly(data$df, x = ~x, y = ~y)
})
# output$plot1 <- renderPlotly({
#
#   plot_ly(data$df1, x = ~x, y = ~y)
# })
#
output$event <- renderPrint({
if (is.null(data$hover)) "Hover on a point!" else data$hover
})
}
shinyApp(ui, server)
library(shiny)
library(plotly)
ui <- fluidPage(
plotlyOutput("plot"),
verbatimTextOutput("event"),
plotlyOutput("plot1")
)
server <- function(input, output) {
data <- reactiveValues()
data$df <- data.frame(x = c(4,5,6), y = c(1,2,3))
data$df1 <- data.frame(x=numeric(),y=numeric(), point=numeric())
newEntry <- observeEvent(data$hover,{
req(data$hover$pointNumber)
if(!(data$hover$pointNumber %in% data$df1$point)) {
newLine <- isolate(data.frame(x=data$hover$x, y=data$hover$y))
isolate(data$df1 <- rbind(data$df1, newLine))
}
})
# hover2 <- hover()['pointNumber'] %in% df1()$point
# renderPlotly() also understands ggplot2 objects!
output$plot <- renderPlotly({
print(data$df1)
data$hover <- event_data("plotly_click")
plot_ly(data$df, x = ~x, y = ~y)
})
# output$plot1 <- renderPlotly({
#
#   plot_ly(data$df1, x = ~x, y = ~y)
# })
#
output$event <- renderPrint({
if (is.null(data$hover)) "Hover on a point!" else data$hover
})
}
shinyApp(ui, server)
library(shiny)
library(plotly)
ui <- fluidPage(
plotlyOutput("plot"),
verbatimTextOutput("event"),
plotlyOutput("plot1")
)
server <- function(input, output) {
data <- reactiveValues()
data$df <- data.frame(x = c(4,5,6), y = c(1,2,3))
data$df1 <- data.frame(x=numeric(),y=numeric(), point=numeric())
newEntry <- observeEvent(data$hover,{
req(data$hover$pointNumber)
if(!(data$hover$pointNumber %in% data$df1$point)) {
newLine <- isolate(data.frame(x=data$hover$x, y=data$hover$y))
isolate(data$df1 <- rbind(data$df1, newLine))
}
})
# hover2 <- hover()['pointNumber'] %in% df1()$point
# renderPlotly() also understands ggplot2 objects!
output$plot <- renderPlotly({
print(data$df1)
data$hover <- event_data("plotly_click")
plot_ly(data$df, x = ~x, y = ~y)
})
output$plot1 <- renderPlotly({
plot_ly(data$df1, x = ~x, y = ~y)
})
#
output$event <- renderPrint({
if (is.null(data$hover)) "Hover on a point!" else data$hover
})
}
shinyApp(ui, server)
library(shiny)
library(plotly)
ui <- fluidPage(
plotlyOutput("plot"),
verbatimTextOutput("event"),
plotlyOutput("plot1")
)
server <- function(input, output) {
data <- reactiveValues()
data$df <- data.frame(x = c(4,5,6,4,4), y = c(1,2,3,3,1))
data$df1 <- data.frame(x=numeric(),y=numeric(), point=numeric())
newEntry <- observeEvent(data$hover,{
req(data$hover$pointNumber)
if(!(data$hover$pointNumber %in% data$df1$point)) {
newLine <- isolate(data.frame(x=data$hover$x, y=data$hover$y))
isolate(data$df1 <- rbind(data$df1, newLine))
}
})
# hover2 <- hover()['pointNumber'] %in% df1()$point
# renderPlotly() also understands ggplot2 objects!
output$plot <- renderPlotly({
print(data$df1)
data$hover <- event_data("plotly_click")
plot_ly(data$df, x = ~x, y = ~y)
})
output$plot1 <- renderPlotly({
plot_ly(data$df1, x = ~x, y = ~y)
})
#
output$event <- renderPrint({
if (is.null(data$hover)) "Hover on a point!" else data$hover
})
}
shinyApp(ui, server)
library(shiny)
library(plotly)
ui <- fluidPage(
fluidRow(plotlyOutput("plot"),  plotlyOutput("plot1")),
verbatimTextOutput("event")
)
server <- function(input, output) {
data <- reactiveValues()
data$df <- data.frame(x = c(4,5,6,4,4), y = c(1,2,3,3,1))
data$df1 <- data.frame(x=numeric(),y=numeric(), point=numeric())
newEntry <- observeEvent(data$hover,{
req(data$hover$pointNumber)
if(!(data$hover$pointNumber %in% data$df1$point)) {
newLine <- isolate(data.frame(x=data$hover$x, y=data$hover$y))
isolate(data$df1 <- rbind(data$df1, newLine))
}
})
# hover2 <- hover()['pointNumber'] %in% df1()$point
# renderPlotly() also understands ggplot2 objects!
output$plot <- renderPlotly({
print(data$df1)
data$hover <- event_data("plotly_click")
plot_ly(data$df, x = ~x, y = ~y)
})
output$plot1 <- renderPlotly({
plot_ly(data$df1, x = ~x, y = ~y)
})
#
output$event <- renderPrint({
if (is.null(data$hover)) "Hover on a point!" else data$hover
})
}
shinyApp(ui, server)
ui <- fluidPage(
fluidRow(plotlyOutput("plot"),  plotlyOutput("plot1")),
verbatimTextOutput("event")
)
server <- function(input, output) {
data <- reactiveValues()
data$df <- data.frame(x = c(4,5,6,4,4), y = c(1,2,3,3,1))
data$df1 <- data.frame(x=numeric(),y=numeric(), point=numeric())
newEntry <- observeEvent(data$hover,{
req(data$hover$pointNumber)
if(!(data$hover$pointNumber %in% data$df1$point)) {
newLine <- isolate(data.frame(x=data$hover$x, y=data$hover$y))
isolate(data$df1 <- rbind(data$df1, newLine))
}
})
# hover2 <- hover()['pointNumber'] %in% df1()$point
# renderPlotly() also understands ggplot2 objects!
output$plot <- renderPlotly({
print(data$df1)
data$hover <- event_data("plotly_click")
plot_ly(data$df, x = ~x, y = ~y)
})
output$plot1 <- renderPlotly({
plot_ly(data$df1, x = ~x, y = ~y)
})
#
output$event <- renderPrint({
if (is.null(data$hover)) "Hover on a point!" else data$hover
})
}
shinyApp(ui, server)
library(shiny)
library(plotly)
ui <- fluidPage(
fluidRow(plotlyOutput("plot"),  plotlyOutput("plot1")),
verbatimTextOutput("event")
)
server <- function(input, output) {
data <- reactiveValues()
data$df <- data.frame(x = c(4,5,6,4,4), y = c(1,2,3,3,1))
data$df1 <- data.frame(x=numeric(),y=numeric(), point=numeric())
newEntry <- observeEvent(data$hover,{
req(data$hover$pointNumber)
if(!(data$hover$pointNumber %in% data$df1$point)) {
newLine <- isolate(data.frame(x=data$hover$x, y=data$hover$y))
isolate(data$df1 <- rbind(data$df1, newLine))
}
})
# hover2 <- hover()['pointNumber'] %in% df1()$point
# renderPlotly() also understands ggplot2 objects!
output$plot <- renderPlotly({
print(data$df1)
data$hover <- event_data("plotly_click")
plot_ly(data$df, x = ~x, y = ~y)
})
output$plot1 <- renderPlotly({
plot_ly(data$df1, x = ~x, y = ~y)
})
#
output$event <- renderPrint({
if (is.null(data$hover)) "Hover on a point!" else data$hover
})
}
shinyApp(ui, server)
library(shiny)
library(plotly)
ui <- fluidPage(
fluidRow(plotlyOutput("plot"),  plotlyOutput("plot1")),
verbatimTextOutput("event")
)
server <- function(input, output) {
data <- reactiveValues()
data$df <- data.frame(x = c(4,5,6,4,4), y = c(1,2,3,3,1))
data$df1 <- data.frame(x=numeric(),y=numeric(), point=numeric())
newEntry <- observeEvent(data$hover,{
req(data$hover$pointNumber)
if(!(data$hover$pointNumber %in% data$df1$point)) {
newLine <- data.frame(x=data$hover$x, y=data$hover$y)
data$df1 <- rbind(data$df1, newLine)
}
})
# hover2 <- hover()['pointNumber'] %in% df1()$point
# renderPlotly() also understands ggplot2 objects!
output$plot <- renderPlotly({
print(data$df1)
data$hover <- event_data("plotly_click")
plot_ly(data$df, x = ~x, y = ~y)
})
output$plot1 <- renderPlotly({
plot_ly(data$df1, x = ~x, y = ~y)
})
#
output$event <- renderPrint({
if (is.null(data$hover)) "Hover on a point!" else data$hover
})
}
shinyApp(ui, server)
library(readr)
Tastehood_database_Sheet1 <- read_csv("~/Downloads/Tastehood database - Sheet1.csv")
View(Tastehood_database_Sheet1)
setwd("~/trackeR")
devtools::load_all()
startApp()
devtools::load_all()
devtools::document()
devtools::load_all()
startApp()
devtools::load_all()
startApp()
