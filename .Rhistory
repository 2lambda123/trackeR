} else {
df$Series <- as.numeric(sapply(strsplit(as.character(df$Series), "Session"), function(x) x[2]))
}
df$Profile <- factor(df$Profile)
## ## check that there is data to plot for(l in levels(df$Series)){ if
## (all(is.na(subset(df, Series == l, select = 'Value')))) df <- df[!(df$Series == l), ]
## }
## make basic plot and facets
singleVariable <- nlevels(df$Profile) == 1L
singleSession <- nlevels(df$Series) == 1L
lab_data <- function(series) {
thisunit <- units$unit[units$variable == series]
prettyUnit <- prettifyUnits(thisunit)
paste0(series, " [", prettyUnit, "]")
}
df$Series <- paste('Session', df$Series)
df$Series <- as.factor(df$Series)
pal <-  colorFactor(c('deepskyblue', 'dodgerblue4'), df$Series)
individual_plots <- list()
legend_status <- TRUE
for (feature in what){
y <- list(
title = 'dtime'
)
x <- list(
title = lab_data(feature)
# tickangle = 180
)
p <- plot_ly(subset(df, Profile == feature), x = ~Index, y = ~Value,
color = ~Series, colors = pal(df$Series), legendgroup = ~Series) %>%
add_lines() %>%
layout(xaxis = x, yaxis = y, hovermode = 'closest')
individual_plots[[feature]] <- style(p, showlegend = legend_status)
legend_status <- FALSE
}
plots <- do.call(subplot, c(individual_plots, nrows = length(what),
margin = 0.05, shareY = FALSE, titleX = TRUE, titleY = TRUE))
plots
pal
pal(df$Series)
what = c('speed', 'altitude')
x <- cProfile
session = NULL
smooth = TRUE
units <- getUnits(x)
operations <- getOperations(x)
what <- what[what %in% names(x)]
x <- x[what]  ## FIXME: implement [] method for profiles/variables instead of sessions
class(x) <- "conProfile"
attr(x, "operations") <- operations
attr(x, "unit") <- units
availSessions <- if (is.null(ncol(x[[1]])))
1 else ncol(x[[1]])
if (is.null(session))
session <- 1:availSessions
for (i in what) x[[i]] <- x[[i]][, session]
if (smooth) {
if (!is.null(operations$smooth)) {
warning("This object has already been smoothed. No additional smoothing takes place.")
} else {
x <- smoother(x, what = what)
}
}
rownames(x) <- NULL
df <- fortify(x, melt = TRUE)
if (length(session) < 2) {
df$Series <- session  ## paste0('Session', session)
## df$Series <- factor(df$Series)
} else {
df$Series <- as.numeric(sapply(strsplit(as.character(df$Series), "Session"), function(x) x[2]))
}
df$Profile <- factor(df$Profile)
singleVariable <- nlevels(df$Profile) == 1L
singleSession <- nlevels(df$Series) == 1L
lab_data <- function(series) {
thisunit <- units$unit[units$variable == series]
prettyUnit <- prettifyUnits(thisunit)
paste0(series, " [", prettyUnit, "]")
}
dat$Series <- paste("Session", sprintf(paste0("%0", nchar(max(df$Series)), "d"), df$Series))
df$Series <- paste("Session", sprintf(paste0("%0", nchar(max(df$Series)), "d"), df$Series))
pal <-  colorFactor(c('deepskyblue', 'dodgerblue4'), df$Series)
individual_plots <- list()
legend_status <- TRUE
for (feature in what){
y <- list(
title = 'dtime'
)
x <- list(
title = lab_data(feature)
# tickangle = 180
)
p <- plot_ly(subset(df, Profile == feature), x = ~Index, y = ~Value,
color = ~Series, colors = pal(df$Series), legendgroup = ~Series) %>%
add_lines() %>%
layout(xaxis = x, yaxis = y, hovermode = 'closest')
individual_plots[[feature]] <- style(p, showlegend = legend_status)
legend_status <- FALSE
}
plots <- do.call(subplot, c(individual_plots, nrows = length(what),
margin = 0.05, shareY = FALSE, titleX = TRUE, titleY = TRUE))
return(plots)
plots
dProfile <- distributionProfile(runs, session = 1:10, what = c('speed', 'altitude'),
grid = breaks)
plot(dProfile, multiple = TRUE)
cProfile <- concentrationProfile(dProfile, what = c('speed', 'altitude'))
what = c('speed', 'altitude')
x <- cProfile
session = NULL
smooth = TRUE
units <- getUnits(x)
operations <- getOperations(x)
what <- what[what %in% names(x)]
x <- x[what]  ## FIXME: implement [] method for profiles/variables instead of sessions
class(x) <- "conProfile"
attr(x, "operations") <- operations
attr(x, "unit") <- units
availSessions <- if (is.null(ncol(x[[1]])))
1 else ncol(x[[1]])
if (is.null(session))
session <- 1:availSessions
for (i in what) x[[i]] <- x[[i]][, session]
if (smooth) {
if (!is.null(operations$smooth)) {
warning("This object has already been smoothed. No additional smoothing takes place.")
} else {
x <- smoother(x, what = what)
}
}
rownames(x) <- NULL
df <- fortify(x, melt = TRUE)
if (length(session) < 2) {
df$Series <- session  ## paste0('Session', session)
## df$Series <- factor(df$Series)
} else {
df$Series <- as.numeric(sapply(strsplit(as.character(df$Series), "Session"), function(x) x[2]))
}
df$Profile <- factor(df$Profile)
singleVariable <- nlevels(df$Profile) == 1L
singleSession <- nlevels(df$Series) == 1L
lab_data <- function(series) {
thisunit <- units$unit[units$variable == series]
prettyUnit <- prettifyUnits(thisunit)
paste0(series, " [", prettyUnit, "]")
}
df$Series <- paste("Session", sprintf(paste0("%0", nchar(max(df$Series)), "d"), df$Series))
pal <-  colorFactor(c('deepskyblue', 'dodgerblue4'), df$Series)
individual_plots <- list()
legend_status <- TRUE
for (feature in what){
y <- list(
title = 'dtime'
)
x <- list(
title = lab_data(feature)
# tickangle = 180
)
p <- plot_ly(subset(df, Profile == feature), x = ~Index, y = ~Value,
color = ~Series, colors = pal(df$Series), legendgroup = ~Series) %>%
add_lines() %>%
layout(xaxis = x, yaxis = y, hovermode = 'closest')
individual_plots[[feature]] <- style(p, showlegend = legend_status)
legend_status <- FALSE
}
plots <- do.call(subplot, c(individual_plots, nrows = length(what),
margin = 0.05, shareY = FALSE, titleX = TRUE, titleY = TRUE))
return(plots)
plots
df$Series <- as.factor(df$Series)
pal <-  colorFactor(c('deepskyblue', 'dodgerblue4'), df$Series)
individual_plots <- list()
legend_status <- TRUE
for (feature in what){
y <- list(
title = 'dtime'
)
x <- list(
title = lab_data(feature)
# tickangle = 180
)
p <- plot_ly(subset(df, Profile == feature), x = ~Index, y = ~Value,
color = ~Series, colors = pal(df$Series), legendgroup = ~Series) %>%
add_lines() %>%
layout(xaxis = x, yaxis = y, hovermode = 'closest')
individual_plots[[feature]] <- style(p, showlegend = legend_status)
legend_status <- FALSE
}
plots <- do.call(subplot, c(individual_plots, nrows = length(what),
margin = 0.05, shareY = FALSE, titleX = TRUE, titleY = TRUE))
return(plots)
plots
cProfile <- concentrationProfile(dProfile, what = c('speed', 'altitude'))
what = c('speed', 'altitude')
x <- cProfile
session = NULL
smooth = TRUE
units <- getUnits(x)
operations <- getOperations(x)
what <- what[what %in% names(x)]
x <- x[what]  ## FIXME: implement [] method for profiles/variables instead of sessions
class(x) <- "conProfile"
attr(x, "operations") <- operations
attr(x, "unit") <- units
availSessions <- if (is.null(ncol(x[[1]])))
1 else ncol(x[[1]])
if (is.null(session))
session <- 1:availSessions
for (i in what) x[[i]] <- x[[i]][, session]
if (smooth) {
if (!is.null(operations$smooth)) {
warning("This object has already been smoothed. No additional smoothing takes place.")
} else {
x <- smoother(x, what = what)
}
}
rownames(x) <- NULL
df <- fortify(x, melt = TRUE)
if (length(session) < 2) {
df$Series <- session  ## paste0('Session', session)
## df$Series <- factor(df$Series)
} else {
df$Series <- as.numeric(sapply(strsplit(as.character(df$Series), "Session"), function(x) x[2]))
}
df$Profile <- factor(df$Profile)
singleVariable <- nlevels(df$Profile) == 1L
singleSession <- nlevels(df$Series) == 1L
lab_data <- function(series) {
thisunit <- units$unit[units$variable == series]
prettyUnit <- prettifyUnits(thisunit)
paste0(series, " [", prettyUnit, "]")
}
df$series <- paste("Session", sprintf(paste0("%0", nchar(max(df$Series)), "d"), df$Series))
pal <-  colorFactor(c('deepskyblue', 'dodgerblue4'), df$series)
individual_plots <- list()
legend_status <- TRUE
for (feature in what){
y <- list(
title = 'dtime'
)
x <- list(
title = lab_data(feature)
# tickangle = 180
)
p <- plot_ly(subset(df, Profile == feature), x = ~Index, y = ~Value,
color = ~series, colors = pal(df$series), legendgroup = ~series) %>%
add_lines() %>%
layout(xaxis = x, yaxis = y, hovermode = 'closest')
individual_plots[[feature]] <- style(p, showlegend = legend_status)
legend_status <- FALSE
}
plots <- do.call(subplot, c(individual_plots, nrows = length(what),
margin = 0.05, shareY = FALSE, titleX = TRUE, titleY = TRUE))
plots
devtools::document()
devtools::load_all()
startApp()
devtools::load_all()
startApp()
cProfile <- concentrationProfile(dProfile, what = c('speed', 'altitude'))
what = c('speed', 'altitude')
x <- cProfile
session = NULL
smooth = TRUE
##############################################################################
units <- getUnits(x)
operations <- getOperations(x)
## select variables
what <- what[what %in% names(x)]
x <- x[what]  ## FIXME: implement [] method for profiles/variables instead of sessions
class(x) <- "conProfile"
attr(x, "operations") <- operations
attr(x, "unit") <- units
## select sessions if (is.null(session)) { session <- attr(x[[1]], 'dimnames')[[2]]
## #1:ncol(x[[1]]) } else { if(is.numeric(session)) session <- attr(x[[1]],
## 'dimnames')[[2]][session] }
availSessions <- if (is.null(ncol(x[[1]])))
1 else ncol(x[[1]])
if (is.null(session))
session <- 1:availSessions
for (i in what) x[[i]] <- x[[i]][, session]
## smooth
if (smooth) {
if (!is.null(operations$smooth)) {
warning("This object has already been smoothed. No additional smoothing takes place.")
} else {
x <- smoother(x, what = what)
}
}
## get data
rownames(x) <- NULL
df <- fortify(x, melt = TRUE)
## if (length(session) > 1L) df <- subset(df, Series %in% session) df <- subset(df,
## Profile %in% what) HACK: If there is only one session (=series) to be plotted, give
## it a proper name for multiple = TRUE.
if (length(session) < 2) {
df$Series <- session  ## paste0('Session', session)
## df$Series <- factor(df$Series)
} else {
df$Series <- as.numeric(sapply(strsplit(as.character(df$Series), "Session"), function(x) x[2]))
}
df$Profile <- factor(df$Profile)
## ## check that there is data to plot for(l in levels(df$Series)){ if
## (all(is.na(subset(df, Series == l, select = 'Value')))) df <- df[!(df$Series == l), ]
## }
## make basic plot and facets
singleVariable <- nlevels(df$Profile) == 1L
singleSession <- nlevels(df$Series) == 1L
lab_data <- function(series) {
thisunit <- units$unit[units$variable == series]
prettyUnit <- prettifyUnits(thisunit)
paste0(series, " [", prettyUnit, "]")
}
df$series <- paste("Session", sprintf(paste0("%0", nchar(max(df$Series)), "d"), df$Series))
pal <-  colorFactor(c('deepskyblue', 'dodgerblue4'), df$Series)
pal(2)
pal <-  colorFactor(c('deepskyblue', 'dodgerblue4'), df$Series)
individual_plots <- list()
legend_status <- TRUE
for (feature in what){
y <- list(
title = 'dtime'
)
x <- list(
title = lab_data(feature)
# tickangle = 180
)
p <- plot_ly(subset(df, Profile == feature), x = ~Index, y = ~Value,
color = ~series, colors = pal(df$Series), legendgroup = ~series) %>%
add_lines() %>%
layout(xaxis = x, yaxis = y, hovermode = 'closest')
individual_plots[[feature]] <- style(p, showlegend = legend_status)
legend_status <- FALSE
}
plots <- do.call(subplot, c(individual_plots, nrows = length(what),
margin = 0.05, shareY = FALSE, titleX = TRUE, titleY = TRUE))
return(plots)
plots
colorRampPalette(c("black", "white"))
pal <- colorNumeric(
palette = "Blues",
domain = df$Series)
pal <- colorNumeric(
palette = "Blues",
domain = df$Series)
individual_plots <- list()
legend_status <- TRUE
for (feature in what){
y <- list(
title = 'dtime'
)
x <- list(
title = lab_data(feature)
# tickangle = 180
)
p <- plot_ly(subset(df, Profile == feature), x = ~Index, y = ~Value,
color = ~series, colors = pal(df$Series), legendgroup = ~series) %>%
add_lines() %>%
layout(xaxis = x, yaxis = y, hovermode = 'closest')
individual_plots[[feature]] <- style(p, showlegend = legend_status)
legend_status <- FALSE
}
plots <- do.call(subplot, c(individual_plots, nrows = length(what),
margin = 0.05, shareY = FALSE, titleX = TRUE, titleY = TRUE))
return(plots)
plots
df$Series
unique(df$Series)
pal
colorNumeric(
palette = "Blues",
domain = df$Series)
range(df$Series)
dProfile <- distributionProfile(runs, session = 1:8, what = c('speed', 'altitude'),
grid = breaks)
plot(dProfile, multiple = TRUE)
cProfile <- concentrationProfile(dProfile, what = c('speed', 'altitude'))
what = c('speed', 'altitude')
x <- cProfile
session = NULL
smooth = TRUE
units <- getUnits(x)
operations <- getOperations(x)
what <- what[what %in% names(x)]
x <- x[what]  ## FIXME: implement [] method for profiles/variables instead of sessions
class(x) <- "conProfile"
attr(x, "operations") <- operations
attr(x, "unit") <- units
availSessions <- if (is.null(ncol(x[[1]])))
1 else ncol(x[[1]])
if (is.null(session))
session <- 1:availSessions
for (i in what) x[[i]] <- x[[i]][, session]
if (smooth) {
if (!is.null(operations$smooth)) {
warning("This object has already been smoothed. No additional smoothing takes place.")
} else {
x <- smoother(x, what = what)
}
}
rownames(x) <- NULL
df <- fortify(x, melt = TRUE)
if (length(session) < 2) {
df$Series <- session  ## paste0('Session', session)
## df$Series <- factor(df$Series)
} else {
df$Series <- as.numeric(sapply(strsplit(as.character(df$Series), "Session"), function(x) x[2]))
}
df$Profile <- factor(df$Profile)
singleVariable <- nlevels(df$Profile) == 1L
singleSession <- nlevels(df$Series) == 1L
lab_data <- function(series) {
thisunit <- units$unit[units$variable == series]
prettyUnit <- prettifyUnits(thisunit)
paste0(series, " [", prettyUnit, "]")
}
df$series <- paste("Session", sprintf(paste0("%0", nchar(max(df$Series)), "d"), df$Series))
pal <- colorNumeric(
palette = "Blues",
domain = df$Series)
individual_plots <- list()
legend_status <- TRUE
for (feature in what){
y <- list(
title = 'dtime'
)
x <- list(
title = lab_data(feature)
# tickangle = 180
)
p <- plot_ly(subset(df, Profile == feature), x = ~Index, y = ~Value,
color = ~series, colors = pal(df$Series), legendgroup = ~series) %>%
add_lines() %>%
layout(xaxis = x, yaxis = y, hovermode = 'closest')
individual_plots[[feature]] <- style(p, showlegend = legend_status)
legend_status <- FALSE
}
plots <- do.call(subplot, c(individual_plots, nrows = length(what),
margin = 0.05, shareY = FALSE, titleX = TRUE, titleY = TRUE))
return(plots)
plots
pal(df$Series)
unique( pal(df$Series))
as.factor(df$series, ordered=TRUE)
factor(df$series, ordered=TRUE)
df$series <- factor(df$series, ordered=TRUE)
pal <-  colorFactor("Blues", df$series)
pal
pal('Session 8')
individual_plots <- list()
legend_status <- TRUE
for (feature in what){
y <- list(
title = 'dtime'
)
x <- list(
title = lab_data(feature)
# tickangle = 180
)
p <- plot_ly(subset(df, Profile == feature), x = ~Index, y = ~Value,
color = ~series, colors = pal(df$Series), legendgroup = ~series) %>%
add_lines() %>%
layout(xaxis = x, yaxis = y, hovermode = 'closest')
individual_plots[[feature]] <- style(p, showlegend = legend_status)
legend_status <- FALSE
}
plots <- do.call(subplot, c(individual_plots, nrows = length(what),
margin = 0.05, shareY = FALSE, titleX = TRUE, titleY = TRUE))
return(plots)
pal <-  colorFactor(c('deepskyblue', 'dodgerblue4'), df$series)
individual_plots <- list()
legend_status <- TRUE
for (feature in what){
y <- list(
title = 'dtime'
)
x <- list(
title = lab_data(feature)
# tickangle = 180
)
p <- plot_ly(subset(df, Profile == feature), x = ~Index, y = ~Value,
color = ~series, colors = pal(df$Series), legendgroup = ~series) %>%
add_lines() %>%
layout(xaxis = x, yaxis = y, hovermode = 'closest')
individual_plots[[feature]] <- style(p, showlegend = legend_status)
legend_status <- FALSE
}
plots <- do.call(subplot, c(individual_plots, nrows = length(what),
margin = 0.05, shareY = FALSE, titleX = TRUE, titleY = TRUE))
plots
individual_plots <- list()
legend_status <- TRUE
for (feature in what){
y <- list(
title = 'dtime'
)
x <- list(
title = lab_data(feature)
# tickangle = 180
)
p <- plot_ly(subset(df, Profile == feature), x = ~Index, y = ~Value,
color = ~series, colors = pal(df$series), legendgroup = ~series) %>%
add_lines() %>%
layout(xaxis = x, yaxis = y, hovermode = 'closest')
individual_plots[[feature]] <- style(p, showlegend = legend_status)
legend_status <- FALSE
}
plots <- do.call(subplot, c(individual_plots, nrows = length(what),
margin = 0.05, shareY = FALSE, titleX = TRUE, titleY = TRUE))
plots
pal
df$series
