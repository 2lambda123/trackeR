paste("You chose", icons)
})
}
shinyApp(ui, server)
startApp()
devtools::load_all()
startApp()
devtools::load_all()
startApp()
devtools::load_all()
startApp()
devtools::load_all()
startApp()
devtools::load_all()
startApp()
devtools::load_all()
startApp()
devtools::load_all()
startApp()
devtools::load_all()
startApp()
devtools::load_all()
startApp()
dashboardSidebar(width = 600)
devtools::load_all()
devtools::load_all()
startApp()
startApp()
?readContainer()
runs
getUnits(runs)
getUnits(runs)$variable
!(getUnits(runs)$variable %in% c('latitude', 'longitude')
)
!(getUnits(runs)$variable %in% c('latitude', 'longitude', 'heart.rate'))
getUnits(runs)$variable[!(getUnits(runs)$variable %in% c('latitude', 'longitude', 'heart.rate'))]
paste0('das','asd')
devtools::load_all()
startApp()
devtools::load_all()
startApp()
devtools::load_all()
startApp()
changeUnits(runs, variable = 'speed', unit = 'km_per_h')
devtools::load_all()
startApp()
devtools::load_all()
startApp()
devtools::load_all()
startApp()
devtools::load_all()
startApp()
devtools::load_all()
startApp()
runs <- changeUnits(runs, variable = 'speed', unit = 'km_per_h')
runs
devtools::load_all()
startApp()
changeUnits(runs, variable = 'duration', unit = 'min')
changeUnits(runs, variable = 'pace', unit = 'min_per_mi')
devtools::load_all()
startApp()
devtools::load_all()
startApp()
devtools::load_all()
startApp()
for(i in c('a', 'b', 'c')){
print(i)
}
'a'+'b'
for(i in c(1, 2, 3)){
a <- i
print(a)
}
b <- 0
b <- 0
for(i in c(1, 2, 3)){
b <- b +i
print(b)
}
b
c <- function(){
b <- 0
for(i in c(1, 2, 3)){
b <- b +i
}
return(b)
}
c()
c <- function(){
b <- 0
for(i in c(1, 2, 3)){
print(i)
#b <- b +i
}
return(b)
}
c
c()
for(i in c(1, 2, 3)){
print(i)
#b <- b +i
}
for(i in c(1, 2, 3)){
print(i)
#b <- b +i
}
for(i in c(1, 2, 3)){
print('sad')
#b <- b +i
}
e<- function(){
b <- 0
for(i in c(1, 2, 3)){
print(i)
#b <- b +i
}
return(b)
}
e()
e<- function(){
b <- 0
for(i in c(1, 2, 3)){
print(i)
#b <- b +i
}
return(b)
}
e()
e<- function(){
b <- 0
for(i in c(1, 2, 3)){
b <- b +i
}
return(b)
}
e()
changeUnits(data, variable = c('speed','cadence'), unit = c('m_per_s','steps_per_min'))
changeUnits(runs, variable = c('speed','cadence'), unit = c('m_per_s','steps_per_min'))
devtools::load_all()
changeUnits(runs, variable = c('speed','cadence'), unit = c('m_per_s','steps_per_min'))
data(runs)
changeUnits(runs, variable = c('speed','cadence'), unit = c('m_per_s','steps_per_min'))
a <- c()
a <- c(a,5)
a
devtools::load_all()
startApp()
devtools::load_all()
startApp()
devtools::load_all()
startApp()
devtools::load_all()
startApp()
a
a <- c(1,2,3)
class(a)
typeof(a)
as.vector(a)
class(as.vector(a))
devtools::load_all()
startApp()
devtools::load_all()
startApp()
devtools::load_all()
startApp()
devtools::load_all()
startApp()
devtools::load_all()
startApp()
a <- summary(runs)
getUnits(a)
devtools::load_all()
startApp()
# Display a modal that requires valid input before continuing.
shinyApp(
ui = basicPage(
actionButton("show", "Show modal dialog"),
verbatimTextOutput("dataInfo")
),
server = function(input, output) {
# reactiveValues object for storing current data set.
vals <- reactiveValues(data = NULL)
# Return the UI for a modal dialog with data selection input. If 'failed' is
# TRUE, then display a message that the previous value was invalid.
dataModal <- function(failed = FALSE) {
modalDialog(
textInput("dataset", "Choose data set",
placeholder = 'Try "mtcars" or "abc"'
),
span('(Try the name of a valid data object like "mtcars", ',
'then a name of a non-existent object like "abc")'),
if (failed)
div(tags$b("Invalid name of data object", style = "color: red;")),
footer = tagList(
modalButton("Cancel"),
actionButton("ok", "OK")
)
)
}
# Show modal when button is clicked.
observeEvent(input$show, {
showModal(dataModal())
})
# When OK button is pressed, attempt to load the data set. If successful,
# remove the modal. If not show another modal, but this time with a failure
# message.
observeEvent(input$ok, {
# Check that data object exists and is data frame.
if (!is.null(input$dataset) && nzchar(input$dataset) &&
exists(input$dataset) && is.data.frame(get(input$dataset))) {
vals$data <- get(input$dataset)
removeModal()
} else {
showModal(dataModal(failed = TRUE))
}
})
# Display information about selected data
output$dataInfo <- renderPrint({
if (is.null(vals$data))
"No data selected"
else
summary(vals$data)
})
}
)
shinyApp(
ui = basicPage(
actionButton("show", "Show modal dialog")
),
server = function(input, output) {
observeEvent(input$show, {
showModal(modalDialog(
title = "Somewhat important message",
"This is a somewhat important message.",
easyClose = TRUE,
footer = NULL
))
})
}
)
startApp()
devtools::load_all()
startApp()
# Display a modal that requires valid input before continuing.
shinyApp(
ui = basicPage(
actionButton("show", "Show modal dialog"),
verbatimTextOutput("dataInfo")
),
server = function(input, output) {
# reactiveValues object for storing current data set.
vals <- reactiveValues(data = NULL)
# Return the UI for a modal dialog with data selection input. If 'failed' is
# TRUE, then display a message that the previous value was invalid.
dataModal <- function(failed = FALSE) {
modalDialog(
textInput("dataset", "Choose data set",
placeholder = 'Try "mtcars" or "abc"'
),
span('(Try the name of a valid data object like "mtcars", ',
'then a name of a non-existent object like "abc")'),
if (failed)
div(tags$b("Invalid name of data object", style = "color: red;")),
footer = tagList(
modalButton("Cancel"),
actionButton("ok", "OK")
)
)
}
# Show modal when button is clicked.
observeEvent(input$show, {
showModal(dataModal())
})
# When OK button is pressed, attempt to load the data set. If successful,
# remove the modal. If not show another modal, but this time with a failure
# message.
observeEvent(input$ok, {
# Check that data object exists and is data frame.
if (!is.null(input$dataset) && nzchar(input$dataset) &&
exists(input$dataset) && is.data.frame(get(input$dataset))) {
vals$data <- get(input$dataset)
removeModal()
} else {
showModal(dataModal(failed = TRUE))
}
})
# Display information about selected data
output$dataInfo <- renderPrint({
if (is.null(vals$data))
"No data selected"
else
summary(vals$data)
})
}
)
# Display a modal that requires valid input before continuing.
shinyApp(
ui = basicPage(
actionButton("show", "Show modal dialog"),
verbatimTextOutput("dataInfo")
),
server = function(input, output) {
# reactiveValues object for storing current data set.
vals <- reactiveValues(data = NULL)
# Return the UI for a modal dialog with data selection input. If 'failed' is
# TRUE, then display a message that the previous value was invalid.
dataModal <- function(failed = FALSE) {
modalDialog(
textInput("dataset", "Choose data set",
placeholder = 'Try "mtcars" or "abc"'
),
span('(Try the name of a valid data object like "mtcars", ',
'then a name of a non-existent object like "abc")'),
if (failed)
div(tags$b("Invalid name of data object", style = "color: red;")),
footer = tagList(
modalButton("Cancel"),
actionButton("ok", "OK")
)
)
}
# Show modal when button is clicked.
observeEvent(input$show, {
showModal(dataModal())
})
# When OK button is pressed, attempt to load the data set. If successful,
# remove the modal. If not show another modal, but this time with a failure
# message.
observeEvent(input$ok, {
# Check that data object exists and is data frame.
if (!is.null(input$dataset) && nzchar(input$dataset) &&
exists(input$dataset) && is.data.frame(get(input$dataset))) {
vals$data <- get(input$dataset)
removeModal()
} else {
showModal(dataModal(failed = TRUE))
}
})
# Display information about selected data
output$dataInfo <- renderPrint({
if (is.null(vals$data))
"No data selected"
else
summary(vals$data)
})
}
)
# Display a modal that requires valid input before continuing.
shinyApp(
ui = basicPage(
actionButton("show", "Show modal dialog"),
verbatimTextOutput("dataInfo")
),
server = function(input, output) {
# reactiveValues object for storing current data set.
vals <- reactiveValues(data = NULL)
# Return the UI for a modal dialog with data selection input. If 'failed' is
# TRUE, then display a message that the previous value was invalid.
dataModal <- function(failed = FALSE) {
modalDialog(
textInput("dataset", "Choose data set",
placeholder = 'Try "mtcars" or "abc"'
),
span('(Try the name of a valid data object like "mtcars", ',
'then a name of a non-existent object like "abc")'),
if (failed)
div(tags$b("Invalid name of data object", style = "color: red;")),
footer = tagList(
modalButton("Cancel"),
actionButton("ok", "OK")
)
)
}
# Show modal when button is clicked.
observeEvent(input$show, {
showModal(dataModal())
})
# When OK button is pressed, attempt to load the data set. If successful,
# remove the modal. If not show another modal, but this time with a failure
# message.
observeEvent(input$ok, {
# Check that data object exists and is data frame.
if (!is.null(input$dataset) && nzchar(input$dataset) &&
exists(input$dataset) && is.data.frame(get(input$dataset))) {
vals$data <- get(input$dataset)
removeModal()
} else {
showModal(dataModal(failed = TRUE))
}
})
# Display information about selected data
output$dataInfo <- renderPrint({
if (is.null(vals$data))
"No data selected"
else
summary(vals$data)
})
}
)
devtools::load_all()
startApp()
devtools::load_all()
startApp()
devtools::load_all()
startApp()
devtools::load_all()
startApp()
devtools::load_all()
startApp()
getUnits(runs)
get_selected_units <- function(feature){
getUnits(data$dataSet)$unit[getUnits(data$dataSet)$variable %in% feature]
}
devtools::load_all()
startApp()
devtools::load_all()
startApp()
install.packages("shinycssloaders")
devtools::load_all()
startApp()
devtools::document()
devtools::load_all()
startApp()
if (interactive()) {
options(device.ask.default = FALSE)
ui <- fluidPage(
checkboxGroupInput('in1', 'Check some letters', choices = head(LETTERS)),
selectizeInput('in2', 'Select a state', choices = state.name),
plotOutput('plot')
)
server <- function(input, output) {
output$plot <- renderPlot({
validate(
need(input$in1, 'Check at least one letter!'),
need(input$in2 != '', 'Please choose a state.')
)
plot(1:10, main = paste(c(input$in1, input$in2), collapse = ', '))
})
}
shinyApp(ui, server)
}
if (interactive()) {
options(device.ask.default = FALSE)
ui <- fluidPage(
checkboxGroupInput('in1', 'Check some letters', choices = head(LETTERS)),
selectizeInput('in2', 'Select a state', choices = state.name),
plotOutput('plot')
)
server <- function(input, output) {
output$plot <- renderPlot({
validate(
need(input$in1, 'Check at least one letter!'),
need(input$in2 != '', 'Please choose a state.')
)
plot(1:10, main = paste(c(input$in1, input$in2), collapse = ', '))
})
}
shinyApp(ui, server)
}
devtools::load_all()
startApp()
devtools::load_all()
startApp()
devtools::load_all()
startApp()
devtools::load_all()
startApp()
devtools::load_all()
startApp()
devtools::load_all()
startApp()
devtools::load_all()
startApp()
get_ceiling <- function(feature, data){
ceiling(max(data$feature))
}
get_floor <- function(feature, data){
floor(min(data$feature))
}
devtools::load_all()
startApp()
devtools::load_all()
startApp()
devtools::load_all()
startApp()
?absolutePanel
devtools::load_all()
startApp()
devtools::load_all()
startApp()
devtools::load_all()
startApp()
devtools::load_all()
startApp()
startApp()
startApp()
remove.packages(dashboardBody)
remove.packages("shiny")
library(shiny)
devtools::document()
install.packages("Shiny")
devtools::document()
install.packages("shiny")
devtools::document()
remove.packages("shiny")
devtools::load_all()
startApp()
install.packages("shiny")
devtools::document()
devtools::load_all()
startApp()
