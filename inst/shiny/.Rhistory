# unique(mergedDataFrame$ID)
# str(mergedDataFrame)
################################
drops <- c("Outcome")
X <- mergedDataFrame[ ,!(names(mergedDataFrame) %in% drops)]
y <- mergedDataFrame[,'Outcome']
uniqueID <- unique(X$ID)
drops <- c('Outcome','ID','date')
nums <- sapply(X[,!(names(X) %in% drops)], is.character)
X_numeric <- X[,c('ID','date',names(nums[nums==FALSE]))]
drops <- c('Outcome','ID','date','elapsedTime')
#names(X_numeric)[!(names(X_numeric) %in% drops)] <- paste(names(X_numeric)[!(names(X_numeric) %in% drops)],'change')
#creating a temporary file
createTemporary <- function(ID='31'){
dataTemporary <- X_numeric[X_numeric$ID == ID,]
dataTemporary2 <- X[X$ID == ID,]
outcome <- unique(mergedDataFrame[,c('ID','Outcome')])
uniqueDate <- unique(dataTemporary$date)
sortDate <- sort(dataTemporary$date)
n <- length(sortDate)
drops <- c('ID','date','elapsedTime')
date1 <- dataTemporary[dataTemporary$date==sortDate[1],!(names(dataTemporary) %in% drops)]
date2 <- dataTemporary[dataTemporary$date==sortDate[2],!(names(dataTemporary) %in% drops)]
#date2 <- dataTemporary[dataTemporary$date==tail(sortDate,n=1),c(4:ncol(dataTemporary))]
difference <- (date2-date1)
names(difference)<- paste(names(difference),'change')
#baseline <- dataTemporary2[dataTemporary2$date==sortDate[1], c(3:23)]
baseline <- dataTemporary2[dataTemporary2$date==sortDate[1], !(names(X) %in% drops)]
lastVisit <- dataTemporary2[dataTemporary2$date==tail(sortDate,n=1), !(names(X) %in% drops)]
colnames(lastVisit) <- paste(colnames(lastVisit),'lastVisit')
changeLastFirstVisit <-dataTemporary[dataTemporary$date==tail(sortDate,n=1),!(names(dataTemporary) %in% drops)] -
dataTemporary[dataTemporary$date==sortDate[1],!(names(dataTemporary) %in% drops)]
colnames(changeLastFirstVisit) <- paste(colnames(changeLastFirstVisit),'_changeLastFirstVisit')
#standardDeviation <- list(sapply(dataTemporary[dataTemporary$date==sortDate,c(4:ncol(dataTemporary))], sd))
standardDeviation <- list(sapply(dataTemporary[dataTemporary$date==sortDate[1] | dataTemporary$date==sortDate[2],!(names(dataTemporary) %in% drops)], sd))
standardDeviation <- as.data.frame(t(do.call(cbind, standardDeviation)))
names(standardDeviation) <- paste(names(X_numeric)[!(names(dataTemporary) %in% drops)],'sd')
dataFinalTemporary <- cbind(as.data.frame(baseline), as.data.frame(lastVisit), as.data.frame(difference), as.data.frame(standardDeviation),as.data.frame(changeLastFirstVisit))
dataFinalTemporary$elapsedTime <- dataTemporary[dataTemporary$date==sortDate[2],"date"]-dataTemporary[dataTemporary$date==sortDate[1],"date"]
dataFinalTemporary$Outcome <- outcome$Outcome[outcome$ID==ID]
dataFinalTemporary$ID <- ID
dataFinalTemporary <- dataFinalTemporary[,c(ncol(dataFinalTemporary),(1:ncol(dataFinalTemporary)-1))]
return(dataFinalTemporary)
}
dataTemporaryAddedFeatures <- createTemporary()
dataFinalAddedFeatures <- dataTemporaryAddedFeatures
for(ID in uniqueID){
dataTemporary <- X_numeric[X_numeric$ID == ID,]
dataTemporary2 <- X[X$ID == ID,]
outcome <- unique(mergedDataFrame[,c('ID','Outcome')])
uniqueDate <- unique(dataTemporary$date)
sortDate <- sort(dataTemporary$date)
n <- length(sortDate)
drops <- c('ID','date','elapsedTime')
date1 <- dataTemporary[dataTemporary$date==sortDate[1],!(names(dataTemporary) %in% drops)]
date2 <- dataTemporary[dataTemporary$date==sortDate[2],!(names(dataTemporary) %in% drops)]
#date2 <- dataTemporary[dataTemporary$date==tail(sortDate,n=1),c(4:ncol(dataTemporary))]
difference <- (date2-date1)
names(difference)<- paste(names(difference),'change')
#baseline <- dataTemporary2[dataTemporary2$date==sortDate[1], c(3:23)]
baseline <- dataTemporary2[dataTemporary2$date==sortDate[1], !(names(X) %in% drops)]
lastVisit <- dataTemporary2[dataTemporary2$date==tail(sortDate,n=1), !(names(X) %in% drops)]
colnames(lastVisit) <- paste(colnames(lastVisit),'lastVisit')
changeLastFirstVisit <-dataTemporary[dataTemporary$date==tail(sortDate,n=1),!(names(dataTemporary) %in% drops)] -
dataTemporary[dataTemporary$date==sortDate[1],!(names(dataTemporary) %in% drops)]
colnames(changeLastFirstVisit) <- paste(colnames(changeLastFirstVisit),'_changeLastFirstVisit')
#standardDeviation <- list(sapply(dataTemporary[dataTemporary$date==sortDate,c(4:ncol(dataTemporary))], sd))
standardDeviation <- list(sapply(dataTemporary[dataTemporary$date==sortDate[1] | dataTemporary$date==sortDate[2],!(names(dataTemporary) %in% drops)], sd))
standardDeviation <- as.data.frame(t(do.call(cbind, standardDeviation)))
names(standardDeviation) <- paste(names(X_numeric)[!(names(dataTemporary) %in% drops)],'sd')
dataFinalTemporary <- cbind(as.data.frame(baseline), as.data.frame(lastVisit), as.data.frame(difference), as.data.frame(standardDeviation),as.data.frame(changeLastFirstVisit))
dataFinalTemporary$elapsedTime <- dataTemporary[dataTemporary$date==sortDate[2],"date"]-dataTemporary[dataTemporary$date==sortDate[1],"date"]
dataFinalTemporary$Outcome <- outcome$Outcome[outcome$ID==ID]
dataFinalTemporary$ID <- ID
dataFinalTemporary <- dataFinalTemporary[,c(ncol(dataFinalTemporary),(1:ncol(dataFinalTemporary)-1))]
dataFinalAddedFeatures<- rbind.fill(dataFinalAddedFeatures, dataFinalTemporary)
}
dataFinalAddedFeatures <- dataFinalAddedFeatures[c(2:nrow(dataFinalAddedFeatures)),]
dataFinalAddedFeatures$Outcome[dataFinalAddedFeatures$Outcome != '01.Community'] <- 0
dataFinalAddedFeatures$Outcome[dataFinalAddedFeatures$Outcome == '01.Community'] <- 1
dataFinalAddedFeatures <- dataFinalAddedFeatures[,colSums(is.na(dataFinalAddedFeatures))<85]
write.csv(dataFinalAddedFeatures, file = 'research-smart-health/AnalyticConsole/Data/clinicAddedFeaturesPT.csv', row.names = FALSE)
library(stringr)
library(readr)
library(plyr)
library(zoo)
library(dplyr)
data1 <- read_csv("~/research-smart-health/AnalyticConsole/Data/clinicDataRawPT.csv")
View(data1)
data1 <- read_csv("~/research-smart-health/AnalyticConsole/Data/clinicDataRawPT.csv")
data1$date <- as.Date(data1$date, format="%Y-%m-%d")
data1 <- as.data.frame(data1)
data1$id <- as.character(data1$id)
idDuplicated <- c()
i <- 1
for(ID in unique(data1$id)){
test <- unique(data1[data1$id==ID & data1$date==data1$date[data1$id==ID][1],c("Current Status","Metric")])
for(date in unique(data1$date[data1$id==ID])[-1]){
testAgainst <- unique(data1[data1$id==ID & data1$date==date,c("Current Status","Metric")])
if(sum(duplicated(rbind(test,testAgainst)))/(nrow(test)+nrow(testAgainst))>0.4){
print(union(test, testAgainst))
print(as.Date(date, format="%Y-%m-%d"))
idDuplicated[i] <- unique(data1[data1$id==ID & data1$date==date,'id'])
i <- i+1
}
}
}
idDuplicated
wrongDates <- c()
for(ID in unique(data1$id)){
if(is.unsorted(data1$date[data1$id==ID])==TRUE){
print(ID)
}
}
wrongDates
ID='31'
data1$date[data1$id==ID]
dataTemp <- data1[data1$id=='31',]
View(dataTemp)
library(stringr)
library(readr)
library(plyr)
library(zoo)
library(dplyr)
data1 <- read_csv("~/research-smart-health/AnalyticConsole/Data/clinicDataRawPT.csv")
library(readr)
clinicDataRawPT <- read_csv("~/research-smart-health/AnalyticConsole/Data/clinicDataRawPT.csv")
View(clinicDataRawPT)
data1[data1$id=='31',]
View(data1)
data1 <- read_csv("~/research-smart-health/AnalyticConsole/Data/clinicDataRawPT.csv",col_types = c('numeric','date','text','text','text','text','text','text'))
data1 <- read_csv("~/research-smart-health/AnalyticConsole/Data/clinicDataRawPT.csv",col_types = c('numeric','date','text','text','text','text','text','text'))
data1 <- read_csv("~/research-smart-health/AnalyticConsole/Data/clinicDataRawPT.csv",col_types = c('numeric','date','text','text','text','text','text','text'))
library(readxl)
clinicDataRawPT <- read_excel("~/research-smart-health/AnalyticConsole/Data/clinicDataRawPT.xlsx")[,-1]
View(clinicDataRawPT)
library(readxl)
library(stringr)
library(readr)
library(plyr)
library(zoo)
library(dplyr)
library(readxl)
data1 <- read_excel("~/research-smart-health/AnalyticConsole/Data/clinicDataRawPT.xlsx")[,-1]
data1$date <- as.Date(data1$date, format="%Y-%m-%d")
data1 <- as.data.frame(data1)
data1$id <- as.character(data1$id)
idDuplicated <- c()
i <- 1
for(ID in unique(data1$id)){
test <- unique(data1[data1$id==ID & data1$date==data1$date[data1$id==ID][1],c("Current Status","Metric")])
for(date in unique(data1$date[data1$id==ID])[-1]){
testAgainst <- unique(data1[data1$id==ID & data1$date==date,c("Current Status","Metric")])
if(sum(duplicated(rbind(test,testAgainst)))/(nrow(test)+nrow(testAgainst))>0.4){
print(union(test, testAgainst))
print(as.Date(date, format="%Y-%m-%d"))
idDuplicated[i] <- unique(data1[data1$id==ID & data1$date==date,'id'])
i <- i+1
}
}
}
wrongDates <- c()
for(ID in unique(data1$id)){
if(is.unsorted(data1$date[data1$id==ID])==TRUE){
print(ID)
}
}
data1$date <- as.Date(data1$date, format="%Y-%m-%d")
data1[data1$id=='75' & data1$date=='2017-12-05','date']  <- '2016-12-05'
data1[data1$id=='57' & data1$date=='2017-10-26','date']  <- '2016-10-26'
data1[data1$id=='60' & data1$date=='2017-12-06','date']  <- '2016-11-07'
wrongDates <- c()
i=0
for(ID in unique(data1$id)){
if(is.unsorted(data1$date[data1$id==ID])==TRUE){
i <- i+1
wrongDates[i] <- ID
print(ID)
}
}
wrongDates
data1 <- data1[!(data1$id %in% wrongDates), ]
names(data1)[c(5,7)] <- c('current_status','main_dx')
names(data1) <- tolower(names(data1))
data2 <- data1
data2$metric <-  str_replace_all(data2$metric, "[^[:alpha:]]", " ")
data2$metric <- gsub("\\s+"," ",data2$metric)
data2$comment <- tolower(data2$comment)
data2$comment <- str_replace_all(data2$comment, "[^[:alnum:]]", " ")
data2$comment <- gsub("\\s+"," ",data2$comment)
metrics <- data.frame(unique(data2$metric))
metrics <- data.frame(metrics[which(metrics[1]!=' ' & metrics[1] !='nan'),])
metrics1 <- metrics[1]
metrics1 <- metrics1$metrics.which.metrics.1...........metrics.1......nan.....
list1 <- lapply(metrics1, function(x) metrics1[adist(x, metrics1) < 4])
which(lapply(list1, function(x) length(x))>1)
list1[which(lapply(list1, function(x) length(x))>1)]
data2[data2$metric %in% list1[[5]], 'metric'] <- 'transfer bed chair'
data2[data2$metric %in% list1[[19]], 'metric'] <- 'bed mobility sit supine'
data2[data2$metric %in% list1[[20]], 'metric'] <- 'transfer stand sit'
data2[data2$metric %in% list1[[22]], 'metric'] <- 'transfer stand sit'
data2[data2$metric %in% list1[[23]], 'metric'] <- 'bed mobility sit supine'
data2[data2$metric %in% list1[[28]], 'metric'] <- 'transfer bed chair'
data2 <- data2[!(data2$id %in% wrongDates), ]
metrics <- data.frame(unique(data2$metric))
metrics <- data.frame(metrics[which(metrics[1]!=' ' & metrics[1] !='nan'),])
list1
data2[data2$metric %in% list1[[6]], 'metric']
data2[data2$metric %in% list1[[6]], 'metric'] <- 'transfer sit stand'
list1 <- lapply(metrics1, function(x) metrics1[adist(x, metrics1) < 4])
which(lapply(list1, function(x) length(x))>1)
list1[which(lapply(list1, function(x) length(x))>1)]
list1
metrics <- data.frame(unique(data2$metric))
metrics <- data.frame(metrics[which(metrics[1]!=' ' & metrics[1] !='nan'),])
metrics1 <- metrics[1]
metrics1 <- metrics1$metrics.which.metrics.1...........metrics.1......nan.....
list1 <- lapply(metrics1, function(x) metrics1[adist(x, metrics1) < 4])
list1
library(stringr)
library(readr)
library(plyr)
library(zoo)
library(dplyr)
#data1 <- read_csv("~/research-smart-health/AnalyticConsole/Data/clinicDataRawPT.csv",col_types = c('numeric','date','text','text','text','text','text','text'))
library(readxl)
data1 <- read_excel("~/research-smart-health/AnalyticConsole/Data/clinicDataRawPT.xlsx")[,-1]
data1$date <- as.Date(data1$date, format="%Y-%m-%d")
data1 <- as.data.frame(data1)
data1$id <- as.character(data1$id)
#find patients that might have duplicated visits and investigate them
idDuplicated <- c()
i <- 1
for(ID in unique(data1$id)){
test <- unique(data1[data1$id==ID & data1$date==data1$date[data1$id==ID][1],c("Current Status","Metric")])
for(date in unique(data1$date[data1$id==ID])[-1]){
testAgainst <- unique(data1[data1$id==ID & data1$date==date,c("Current Status","Metric")])
if(sum(duplicated(rbind(test,testAgainst)))/(nrow(test)+nrow(testAgainst))>0.4){
print(union(test, testAgainst))
print(as.Date(date, format="%Y-%m-%d"))
idDuplicated[i] <- unique(data1[data1$id==ID & data1$date==date,'id'])
i <- i+1
}
}
}
#ask Ramin to look into patient '114'
# for(ID in unique(data1$id)){
#   a <- c('','B','C','D')
#   b <- 0
#   for(date in unique(data1$date[data1$id==ID])){
#     if(any(data1[data1$id==ID & data1$date==date,"assessment"][[1]] %in% 'IA')){
#       b <- b+1
#     }
#     data1[data1$id==ID & data1$date==date,"id"] <- paste(data1[data1$id==ID & data1$date==date,"id"], a[b], sep="")
#   }
# }
#see which patients have multiple IA
#data2 <- data1[grepl("[a-zA-Z]", data1$id)==TRUE,]
wrongDates <- c()
for(ID in unique(data1$id)){
if(is.unsorted(data1$date[data1$id==ID])==TRUE){
print(ID)
}
}
#have to manually change all these dates
# [1] 57
# [1] 60
# [1] 67
# [1] 75
# [1] 105
# [1] 112
# [1] 116
# [1] 117
# [1] 91
# [1] 2375061
# [1] 2375050
# [1] 136
data1$date <- as.Date(data1$date, format="%Y-%m-%d")
data1[data1$id=='75' & data1$date=='2017-12-05','date']  <- '2016-12-05'
data1[data1$id=='57' & data1$date=='2017-10-26','date']  <- '2016-10-26'
data1[data1$id=='60' & data1$date=='2017-12-06','date']  <- '2016-11-07'
#67, 105, 112, 116, 117, 91, 2375061, 2375050, 136  not be able to solve currently
wrongDates <- c()
i=0
for(ID in unique(data1$id)){
if(is.unsorted(data1$date[data1$id==ID])==TRUE){
i <- i+1
wrongDates[i] <- ID
print(ID)
}
}
#delete rows with abmiguous dates
data1 <- data1[!(data1$id %in% wrongDates), ]
names(data1)[c(5,7)] <- c('current_status','main_dx')
names(data1) <- tolower(names(data1))
data2 <- data1
data2$metric <-  str_replace_all(data2$metric, "[^[:alpha:]]", " ")
data2$metric <- gsub("\\s+"," ",data2$metric)
data2$comment <- tolower(data2$comment)
data2$comment <- str_replace_all(data2$comment, "[^[:alnum:]]", " ")
data2$comment <- gsub("\\s+"," ",data2$comment)
metrics <- data.frame(unique(data2$metric))
metrics <- data.frame(metrics[which(metrics[1]!=' ' & metrics[1] !='nan'),])
metrics1 <- metrics[1]
metrics1 <- metrics1$metrics.which.metrics.1...........metrics.1......nan.....
list1 <- lapply(metrics1, function(x) metrics1[adist(x, metrics1) < 4])
which(lapply(list1, function(x) length(x))>1)
list1[which(lapply(list1, function(x) length(x))>1)]
list1
data2[data2$metric %in% list1[[23]], 'metric']
list1[which(lapply(list1, function(x) length(x))>1)]
library(stringr)
library(readr)
library(plyr)
library(zoo)
library(dplyr)
#data1 <- read_csv("~/research-smart-health/AnalyticConsole/Data/clinicDataRawPT.csv",col_types = c('numeric','date','text','text','text','text','text','text'))
library(readxl)
data1 <- read_excel("~/research-smart-health/AnalyticConsole/Data/clinicDataRawPT.xlsx")[,-1]
data1$date <- as.Date(data1$date, format="%Y-%m-%d")
data1 <- as.data.frame(data1)
data1$id <- as.character(data1$id)
#find patients that might have duplicated visits and investigate them
idDuplicated <- c()
i <- 1
for(ID in unique(data1$id)){
test <- unique(data1[data1$id==ID & data1$date==data1$date[data1$id==ID][1],c("Current Status","Metric")])
for(date in unique(data1$date[data1$id==ID])[-1]){
testAgainst <- unique(data1[data1$id==ID & data1$date==date,c("Current Status","Metric")])
if(sum(duplicated(rbind(test,testAgainst)))/(nrow(test)+nrow(testAgainst))>0.4){
print(union(test, testAgainst))
print(as.Date(date, format="%Y-%m-%d"))
idDuplicated[i] <- unique(data1[data1$id==ID & data1$date==date,'id'])
i <- i+1
}
}
}
#ask Ramin to look into patient '114'
# for(ID in unique(data1$id)){
#   a <- c('','B','C','D')
#   b <- 0
#   for(date in unique(data1$date[data1$id==ID])){
#     if(any(data1[data1$id==ID & data1$date==date,"assessment"][[1]] %in% 'IA')){
#       b <- b+1
#     }
#     data1[data1$id==ID & data1$date==date,"id"] <- paste(data1[data1$id==ID & data1$date==date,"id"], a[b], sep="")
#   }
# }
#see which patients have multiple IA
#data2 <- data1[grepl("[a-zA-Z]", data1$id)==TRUE,]
wrongDates <- c()
for(ID in unique(data1$id)){
if(is.unsorted(data1$date[data1$id==ID])==TRUE){
print(ID)
}
}
#have to manually change all these dates
# [1] 57
# [1] 60
# [1] 67
# [1] 75
# [1] 105
# [1] 112
# [1] 116
# [1] 117
# [1] 91
# [1] 2375061
# [1] 2375050
# [1] 136
data1$date <- as.Date(data1$date, format="%Y-%m-%d")
data1[data1$id=='75' & data1$date=='2017-12-05','date']  <- '2016-12-05'
data1[data1$id=='57' & data1$date=='2017-10-26','date']  <- '2016-10-26'
data1[data1$id=='60' & data1$date=='2017-12-06','date']  <- '2016-11-07'
#67, 105, 112, 116, 117, 91, 2375061, 2375050, 136  not be able to solve currently
wrongDates <- c()
i=0
for(ID in unique(data1$id)){
if(is.unsorted(data1$date[data1$id==ID])==TRUE){
i <- i+1
wrongDates[i] <- ID
print(ID)
}
}
#delete rows with abmiguous dates
data1 <- data1[!(data1$id %in% wrongDates), ]
names(data1)[c(5,7)] <- c('current_status','main_dx')
names(data1) <- tolower(names(data1))
data2 <- data1
data2$metric <-  str_replace_all(data2$metric, "[^[:alpha:]]", " ")
data2$metric <- gsub("\\s+"," ",data2$metric)
data2$comment <- tolower(data2$comment)
data2$comment <- str_replace_all(data2$comment, "[^[:alnum:]]", " ")
data2$comment <- gsub("\\s+"," ",data2$comment)
metrics <- data.frame(unique(data2$metric))
metrics <- data.frame(metrics[which(metrics[1]!=' ' & metrics[1] !='nan'),])
metrics1 <- metrics[1]
metrics1 <- metrics1$metrics.which.metrics.1...........metrics.1......nan.....
list1 <- lapply(metrics1, function(x) metrics1[adist(x, metrics1) < 4])
which(lapply(list1, function(x) length(x))>1)
list1[which(lapply(list1, function(x) length(x))>1)]
data2[data2$metric %in% list1[[6]], 'metric']
data2[data2$metric %in% list1[[6]], 'metric'] <- 'transfer sit stand'
metrics <- data.frame(unique(data2$metric))
metrics <- data.frame(metrics[which(metrics[1]!=' ' & metrics[1] !='nan'),])
metrics1 <- metrics[1]
metrics1 <- metrics1$metrics.which.metrics.1...........metrics.1......nan.....
list1 <- lapply(metrics1, function(x) metrics1[adist(x, metrics1) < 4])
which(lapply(list1, function(x) length(x))>1)
list1[which(lapply(list1, function(x) length(x))>1)]
data2[!(data2$id %in% wrongDates), ]
data2[(data2$id %in% wrongDates), ]
metrics <- data.frame(unique(data2$metric))
metrics <- data.frame(metrics[which(metrics[1]!=' ' & metrics[1] !='nan'),])
metrics1 <- metrics[1]
metrics1 <- metrics1$metrics.which.metrics.1...........metrics.1......nan.....
data2[which(data2$metric=='gait distance feet'),'current_status'] <- data2[which(data2$metric=='gait distance feet'),'feet']
data2[data2$assessment == 'LTG' & data2$metric=='nan','current_status'] <- data2[data2$assessment == 'LTG' & data2$metric=='nan','comment']
data2[data2$assessment == 'LTG' & data2$metric=='nan','metric'] <- 'goal'
data2[data2$metric == 'nan' & is.na(data2$comment)==FALSE & data2$comment %in% metrics1 & data2$metric != 'goal', 'metric'] <- data2[data2$metric == 'nan' & is.na(data2$comment)==FALSE & data2$comment %in% metrics1 & data2$metric != 'goal','comment']
missingCurrentStatusData <- data2[is.na(data2$current_status) == TRUE | data2$current_status =='nan' , ]
missingMetricData<- data2[data2$metric == 'nan' | is.na(data2$metric) == TRUE, ]
data2$date <- as.Date(data2$date, format="%Y-%m-%d")
uniqueID <- unique(data2$id)
data2$duplicates <- rep(FALSE,nrow(data2))
for(ID in uniqueID){
dataTemporary <- data2[data2$id == ID,]
date <- unique(dataTemporary$date)[1]
data2$duplicates[(data2$id==ID & data2$date==date)] <- duplicated(data2$metric[data2$id==ID & data2$date == date])
}
for(ID in uniqueID){
dataTemporary <- data2[data2$id == ID,]
uniqueDate <- unique(dataTemporary$date)
#sortedDate <- sort(unique(dataTemporary$date))
#match_df(dataTemporary, dataTemporary2)
#dataTemporary <- data2 %>% filter(date==uniqueDate[1] & id == ID ) %>% group_by(metric) %>% which(row_number() == 1)
data2 <- data2[!(data2$id==ID & data2$date == uniqueDate[1] & data2$duplicates==TRUE), ]
#dataTemporary <- data2[data2$id == ID,]
#added code from 30th August 2017
######################################
# intersectMetric <- dataTemporary$metric[dataTemporary$date==uniqueDate[1]]
# for(i in uniqueDate[2:length(uniqueDate)]){
#   intersectMetric <-intersect(intersectMetric,dataTemporary$metric[dataTemporary$date==i])
# }
# data2 <- data2[!(data2$id==ID & !(data2$metric %in% intersectMetric)),]
#####################################
}
drops <- c("feet","main_dx",'comment','assessment','duplicates')
data2 <- data2[ , !(names(data2) %in% drops)]
data2 <- data2[complete.cases(data2) & data2$metric != 'nan' & data2$metric != ' ',]
dataTemporary <- function(ID='31',date="2016-09-26"){
dataTemporary <- data2[data2$id == ID,]
dataTemporary1 <- dataTemporary[dataTemporary$date == date, ]
dataTemporary1 <- dataTemporary1[!duplicated(dataTemporary1), ]
dataTemporary1 <- dataTemporary1[!duplicated(dataTemporary1$metric), ]
#date1 <- as.Date(as.numeric(as.character(date)))
values <- c(ID, date, dataTemporary1$current_status)
colName <- c('ID', 'date', dataTemporary1$metric)
dataFinalTemporary <- setNames(data.frame(matrix(values, ncol = length(values), nrow = 1)), colName)
return(dataFinalTemporary)
}
dataFinalTemporary <- dataTemporary()
finalDataFrame <- dataFinalTemporary
uniqueID <- unique(data2$id)
data2$date <- as.Date(data2$date, format="%Y-%m-%d")
for(ID in uniqueID){
dataTemporary <- data2[data2$id == ID,]
uniqueDate <- unique(dataTemporary$date)
for(date in uniqueDate){
dataTemporary1 <- dataTemporary[dataTemporary$date == date, ]
dataTemporary1 <- dataTemporary1[!duplicated(dataTemporary1), ]
dataTemporary1 <- dataTemporary1[!duplicated(dataTemporary1$metric), ]
#date1 <- as.Date(as.numeric(as.character(date)))
values <- c(ID, date, dataTemporary1$current_status)
colName <- c('ID', 'date', dataTemporary1$metric)
dataFinalTemporary <- setNames(data.frame(matrix(values, ncol = length(values), nrow = 1)), colName)
finalDataFrame <- rbind.fill(finalDataFrame, dataFinalTemporary)
}
}
finalDataFrame <- finalDataFrame[-1,]
finalDataFrame$date <-  as.Date(as.numeric(as.character(unlist(finalDataFrame$date))))
finalDataFrame <- finalDataFrame[,names(sort(sapply(finalDataFrame, function(x){sum(is.na(x))})))]
finalDataFrame <- as.data.frame(as.matrix(finalDataFrame))
finalDataFrame <- as.matrix(finalDataFrame)
finalDataFrame[finalDataFrame=='Set-Up'] <- 'Set-UP'
finalDataFrame[finalDataFrame=='stand by assist (supervision)'] <- 'sba'
finalDataFrame <- apply(finalDataFrame, 2, tolower)
finalDataFrame <- as.data.frame(finalDataFrame)
sapply(finalDataFrame, function(x){sum(is.na(x))})
write.csv(finalDataFrame, 'research-smart-health/AnalyticConsole/Data/clinicDataTransformedPT.csv', row.names = FALSE)
library(readxl)
codeScale <- read_excel("~/research-smart-health/AnalyticConsole/Data/codeScale.xlsx")
names(codeScale) <- c('metric','value')
codeScale$metric[10] <- 'MOD I'
codeScale$metric[11] <- 'MOD(2)'
codeScale$metric <- tolower(codeScale$metric)
codeScaleMetric2 <- unique(finalDataFrame$`bed mobility supine sit`)
codeScale <- as.data.frame(as.matrix(codeScale))
finalDataFrame
sapply(finalDataFrame, function(x){sum(is.na(x))})
write.csv(finalDataFrame, 'research-smart-health/AnalyticConsole/Data/clinicDataTransformedPT.csv', row.names = FALSE)
write.csv(finalDataFrame, 'research-smart-health/AnalyticConsole/Data/clinicDataTransformedPT.csv', row.names = FALSE)
library(bestglm)
?bestglm
library(leaps)
?regsubsets
setwd("~/research-smart-health/AnalyticConsole")
setwd("~/trackeR_final")
devtools::load_all()
trackeR_app()
devtools::load_all()
trackeR_app()
trackeR_app()
